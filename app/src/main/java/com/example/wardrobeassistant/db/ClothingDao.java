package com.example.wardrobeassistant.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wardrobeassistant.db.entity.Clothing;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOTHING".
*/
public class ClothingDao extends AbstractDao<Clothing, Long> {

    public static final String TABLENAME = "CLOTHING";

    /**
     * Properties of entity Clothing.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClothingName = new Property(1, String.class, "clothingName", false, "CLOTHING_NAME");
        public final static Property ClothingColorSystem = new Property(2, String.class, "clothingColorSystem", false, "CLOTHING_COLOR_SYSTEM");
        public final static Property ClothingType = new Property(3, String.class, "clothingType", false, "CLOTHING_TYPE");
        public final static Property ClothingOccasion = new Property(4, String.class, "clothingOccasion", false, "CLOTHING_OCCASION");
        public final static Property ClothingWarmthLevel = new Property(5, String.class, "clothingWarmthLevel", false, "CLOTHING_WARMTH_LEVEL");
        public final static Property ClothingLocation = new Property(6, String.class, "clothingLocation", false, "CLOTHING_LOCATION");
        public final static Property ClothingImageUrl = new Property(7, String.class, "clothingImageUrl", false, "CLOTHING_IMAGE_URL");
        public final static Property ClothingInputTime = new Property(8, Long.class, "clothingInputTime", false, "CLOTHING_INPUT_TIME");
        public final static Property ClothingLocationChangeTime = new Property(9, Long.class, "clothingLocationChangeTime", false, "CLOTHING_LOCATION_CHANGE_TIME");
        public final static Property ClothingViewTime = new Property(10, Long.class, "clothingViewTime", false, "CLOTHING_VIEW_TIME");
        public final static Property IsTakeOut = new Property(11, Boolean.class, "isTakeOut", false, "IS_TAKE_OUT");
    }


    public ClothingDao(DaoConfig config) {
        super(config);
    }
    
    public ClothingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOTHING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLOTHING_NAME\" TEXT," + // 1: clothingName
                "\"CLOTHING_COLOR_SYSTEM\" TEXT," + // 2: clothingColorSystem
                "\"CLOTHING_TYPE\" TEXT," + // 3: clothingType
                "\"CLOTHING_OCCASION\" TEXT," + // 4: clothingOccasion
                "\"CLOTHING_WARMTH_LEVEL\" TEXT," + // 5: clothingWarmthLevel
                "\"CLOTHING_LOCATION\" TEXT," + // 6: clothingLocation
                "\"CLOTHING_IMAGE_URL\" TEXT," + // 7: clothingImageUrl
                "\"CLOTHING_INPUT_TIME\" INTEGER," + // 8: clothingInputTime
                "\"CLOTHING_LOCATION_CHANGE_TIME\" INTEGER," + // 9: clothingLocationChangeTime
                "\"CLOTHING_VIEW_TIME\" INTEGER," + // 10: clothingViewTime
                "\"IS_TAKE_OUT\" INTEGER);"); // 11: isTakeOut
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOTHING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Clothing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String clothingName = entity.getClothingName();
        if (clothingName != null) {
            stmt.bindString(2, clothingName);
        }
 
        String clothingColorSystem = entity.getClothingColorSystem();
        if (clothingColorSystem != null) {
            stmt.bindString(3, clothingColorSystem);
        }
 
        String clothingType = entity.getClothingType();
        if (clothingType != null) {
            stmt.bindString(4, clothingType);
        }
 
        String clothingOccasion = entity.getClothingOccasion();
        if (clothingOccasion != null) {
            stmt.bindString(5, clothingOccasion);
        }
 
        String clothingWarmthLevel = entity.getClothingWarmthLevel();
        if (clothingWarmthLevel != null) {
            stmt.bindString(6, clothingWarmthLevel);
        }
 
        String clothingLocation = entity.getClothingLocation();
        if (clothingLocation != null) {
            stmt.bindString(7, clothingLocation);
        }
 
        String clothingImageUrl = entity.getClothingImageUrl();
        if (clothingImageUrl != null) {
            stmt.bindString(8, clothingImageUrl);
        }
 
        Long clothingInputTime = entity.getClothingInputTime();
        if (clothingInputTime != null) {
            stmt.bindLong(9, clothingInputTime);
        }
 
        Long clothingLocationChangeTime = entity.getClothingLocationChangeTime();
        if (clothingLocationChangeTime != null) {
            stmt.bindLong(10, clothingLocationChangeTime);
        }
 
        Long clothingViewTime = entity.getClothingViewTime();
        if (clothingViewTime != null) {
            stmt.bindLong(11, clothingViewTime);
        }
 
        Boolean isTakeOut = entity.getIsTakeOut();
        if (isTakeOut != null) {
            stmt.bindLong(12, isTakeOut ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Clothing entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String clothingName = entity.getClothingName();
        if (clothingName != null) {
            stmt.bindString(2, clothingName);
        }
 
        String clothingColorSystem = entity.getClothingColorSystem();
        if (clothingColorSystem != null) {
            stmt.bindString(3, clothingColorSystem);
        }
 
        String clothingType = entity.getClothingType();
        if (clothingType != null) {
            stmt.bindString(4, clothingType);
        }
 
        String clothingOccasion = entity.getClothingOccasion();
        if (clothingOccasion != null) {
            stmt.bindString(5, clothingOccasion);
        }
 
        String clothingWarmthLevel = entity.getClothingWarmthLevel();
        if (clothingWarmthLevel != null) {
            stmt.bindString(6, clothingWarmthLevel);
        }
 
        String clothingLocation = entity.getClothingLocation();
        if (clothingLocation != null) {
            stmt.bindString(7, clothingLocation);
        }
 
        String clothingImageUrl = entity.getClothingImageUrl();
        if (clothingImageUrl != null) {
            stmt.bindString(8, clothingImageUrl);
        }
 
        Long clothingInputTime = entity.getClothingInputTime();
        if (clothingInputTime != null) {
            stmt.bindLong(9, clothingInputTime);
        }
 
        Long clothingLocationChangeTime = entity.getClothingLocationChangeTime();
        if (clothingLocationChangeTime != null) {
            stmt.bindLong(10, clothingLocationChangeTime);
        }
 
        Long clothingViewTime = entity.getClothingViewTime();
        if (clothingViewTime != null) {
            stmt.bindLong(11, clothingViewTime);
        }
 
        Boolean isTakeOut = entity.getIsTakeOut();
        if (isTakeOut != null) {
            stmt.bindLong(12, isTakeOut ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Clothing readEntity(Cursor cursor, int offset) {
        Clothing entity = new Clothing( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // clothingName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // clothingColorSystem
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // clothingType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // clothingOccasion
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clothingWarmthLevel
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // clothingLocation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // clothingImageUrl
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // clothingInputTime
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // clothingLocationChangeTime
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // clothingViewTime
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0 // isTakeOut
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Clothing entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClothingName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setClothingColorSystem(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setClothingType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClothingOccasion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClothingWarmthLevel(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setClothingLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setClothingImageUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClothingInputTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setClothingLocationChangeTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setClothingViewTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setIsTakeOut(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Clothing entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Clothing entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Clothing entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
