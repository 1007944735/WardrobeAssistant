package com.example.wardrobeassistant.db;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.wardrobeassistant.db.entity.Clothing;

import com.example.wardrobeassistant.db.entity.Suit;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUIT".
*/
public class SuitDao extends AbstractDao<Suit, Long> {

    public static final String TABLENAME = "SUIT";

    /**
     * Properties of entity Suit.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SuitName = new Property(1, String.class, "suitName", false, "SUIT_NAME");
        public final static Property SuitOvercoatId = new Property(2, Long.class, "suitOvercoatId", false, "SUIT_OVERCOAT_ID");
        public final static Property SuitOuterwearId = new Property(3, Long.class, "suitOuterwearId", false, "SUIT_OUTERWEAR_ID");
        public final static Property SuitTrousersId = new Property(4, Long.class, "suitTrousersId", false, "SUIT_TROUSERS_ID");
        public final static Property SuitShoesId = new Property(5, Long.class, "suitShoesId", false, "SUIT_SHOES_ID");
        public final static Property SuitPreset = new Property(6, boolean.class, "suitPreset", false, "SUIT_PRESET");
        public final static Property SuitCreateTime = new Property(7, Long.class, "suitCreateTime", false, "SUIT_CREATE_TIME");
    }

    private DaoSession daoSession;


    public SuitDao(DaoConfig config) {
        super(config);
    }
    
    public SuitDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUIT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SUIT_NAME\" TEXT," + // 1: suitName
                "\"SUIT_OVERCOAT_ID\" INTEGER," + // 2: suitOvercoatId
                "\"SUIT_OUTERWEAR_ID\" INTEGER," + // 3: suitOuterwearId
                "\"SUIT_TROUSERS_ID\" INTEGER," + // 4: suitTrousersId
                "\"SUIT_SHOES_ID\" INTEGER," + // 5: suitShoesId
                "\"SUIT_PRESET\" INTEGER NOT NULL ," + // 6: suitPreset
                "\"SUIT_CREATE_TIME\" INTEGER);"); // 7: suitCreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUIT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Suit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String suitName = entity.getSuitName();
        if (suitName != null) {
            stmt.bindString(2, suitName);
        }
 
        Long suitOvercoatId = entity.getSuitOvercoatId();
        if (suitOvercoatId != null) {
            stmt.bindLong(3, suitOvercoatId);
        }
 
        Long suitOuterwearId = entity.getSuitOuterwearId();
        if (suitOuterwearId != null) {
            stmt.bindLong(4, suitOuterwearId);
        }
 
        Long suitTrousersId = entity.getSuitTrousersId();
        if (suitTrousersId != null) {
            stmt.bindLong(5, suitTrousersId);
        }
 
        Long suitShoesId = entity.getSuitShoesId();
        if (suitShoesId != null) {
            stmt.bindLong(6, suitShoesId);
        }
        stmt.bindLong(7, entity.getSuitPreset() ? 1L: 0L);
 
        Long suitCreateTime = entity.getSuitCreateTime();
        if (suitCreateTime != null) {
            stmt.bindLong(8, suitCreateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Suit entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String suitName = entity.getSuitName();
        if (suitName != null) {
            stmt.bindString(2, suitName);
        }
 
        Long suitOvercoatId = entity.getSuitOvercoatId();
        if (suitOvercoatId != null) {
            stmt.bindLong(3, suitOvercoatId);
        }
 
        Long suitOuterwearId = entity.getSuitOuterwearId();
        if (suitOuterwearId != null) {
            stmt.bindLong(4, suitOuterwearId);
        }
 
        Long suitTrousersId = entity.getSuitTrousersId();
        if (suitTrousersId != null) {
            stmt.bindLong(5, suitTrousersId);
        }
 
        Long suitShoesId = entity.getSuitShoesId();
        if (suitShoesId != null) {
            stmt.bindLong(6, suitShoesId);
        }
        stmt.bindLong(7, entity.getSuitPreset() ? 1L: 0L);
 
        Long suitCreateTime = entity.getSuitCreateTime();
        if (suitCreateTime != null) {
            stmt.bindLong(8, suitCreateTime);
        }
    }

    @Override
    protected final void attachEntity(Suit entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Suit readEntity(Cursor cursor, int offset) {
        Suit entity = new Suit( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // suitName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // suitOvercoatId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // suitOuterwearId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // suitTrousersId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // suitShoesId
            cursor.getShort(offset + 6) != 0, // suitPreset
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // suitCreateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Suit entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSuitName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSuitOvercoatId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setSuitOuterwearId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setSuitTrousersId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSuitShoesId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSuitPreset(cursor.getShort(offset + 6) != 0);
        entity.setSuitCreateTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Suit entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Suit entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Suit entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getClothingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getClothingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getClothingDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T3", daoSession.getClothingDao().getAllColumns());
            builder.append(" FROM SUIT T");
            builder.append(" LEFT JOIN CLOTHING T0 ON T.\"SUIT_OVERCOAT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN CLOTHING T1 ON T.\"SUIT_OUTERWEAR_ID\"=T1.\"_id\"");
            builder.append(" LEFT JOIN CLOTHING T2 ON T.\"SUIT_TROUSERS_ID\"=T2.\"_id\"");
            builder.append(" LEFT JOIN CLOTHING T3 ON T.\"SUIT_SHOES_ID\"=T3.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Suit loadCurrentDeep(Cursor cursor, boolean lock) {
        Suit entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Clothing suitOvercoat = loadCurrentOther(daoSession.getClothingDao(), cursor, offset);
        entity.setSuitOvercoat(suitOvercoat);
        offset += daoSession.getClothingDao().getAllColumns().length;

        Clothing suitOuterwear = loadCurrentOther(daoSession.getClothingDao(), cursor, offset);
        entity.setSuitOuterwear(suitOuterwear);
        offset += daoSession.getClothingDao().getAllColumns().length;

        Clothing suitTrousers = loadCurrentOther(daoSession.getClothingDao(), cursor, offset);
        entity.setSuitTrousers(suitTrousers);
        offset += daoSession.getClothingDao().getAllColumns().length;

        Clothing suitShoes = loadCurrentOther(daoSession.getClothingDao(), cursor, offset);
        entity.setSuitShoes(suitShoes);

        return entity;    
    }

    public Suit loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Suit> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Suit> list = new ArrayList<Suit>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Suit> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Suit> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
